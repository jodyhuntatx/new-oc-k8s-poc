#!/bin/bash

source ../../dap-service.config

# This script deletes running instances and brings up 
#   initialized Conjur Master, Follower & CLI nodes.
#   It loads a simple demo policy and leaves the user
#   logged into the CLI as the admin user.

#################
main() {
  ./precheck_master.sh
  ./stop
  while [[ "$($DOCKER ps -a | grep $CONJUR_MASTER_CONTAINER_NAME)" != "" ]]; do
    echo -n '.'
    sleep 3
  done
#  configure_networking
  shared_volumes_up
  master_up
  cli_up
  store_config_files_in_cache_dir
  init_k8s_authn
  wait_till_master_is_responsive
  init_demo_secrets
  ./exec-into-cli.sh
}

############################
configure_networking() {
  # enable IPV4 port forwarding
  sysctl -w net.ipv4.ip_forward=1
  # update local firewall rules to allow container-container connections
  firewall-cmd --permanent --zone=public --add-rich-rule='rule family=ipv4 source address=172.17.0.0/16 accept'
  firewall-cmd --reload
}

############################
shared_volumes_up() {
  $DOCKER volume create $CONJUR_AUDIT_VOLUME
  $DOCKER volume create $CONJUR_NGINX_VOLUME
}

############################
master_up() {
  # Bring up Conjur Master node
  $DOCKER run -d \
    --name $CONJUR_MASTER_CONTAINER_NAME \
    --label role=conjur_node \
    -p "$CONJUR_MASTER_PORT:443" \
    -p "$CONJUR_MASTER_PGSYNC_PORT:5432" \
    -p "$CONJUR_MASTER_PGAUDIT_PORT:1999" \
    --volume $CONJUR_AUDIT_VOLUME:/var/log/conjur \
    --volume $CONJUR_NGINX_VOLUME:/var/log/nginx \
    --restart always \
    --security-opt seccomp:unconfined \
    $APPLIANCE_IMAGE 

  # Configure Conjur Master node
  echo "Configuring Conjur master..."
  $DOCKER exec $CONJUR_MASTER_CONTAINER_NAME \
                evoke configure master      \
                -h $CONJUR_MASTER_HOSTNAME \
                -p $AUTHN_PASSWORD   \
		--master-altnames "$MASTER_ALTNAMES"     \
		--follower-altnames "$FOLLOWER_ALTNAMES" \
		--accept-eula		    \
                $CONJUR_ACCOUNT

  echo "Master configured."
}

############################
store_config_files_in_cache_dir() {
  echo "Caching DAP Master certificate..."
  mkdir -p $CACHE_DIR
  rm -f $MASTER_CERT_FILE $FOLLOWER_CERT_FILE
  $DOCKER cp -L $CONJUR_MASTER_CONTAINER_NAME:/opt/conjur/etc/ssl/conjur.pem $MASTER_CERT_FILE

  echo "Caching DAP Follower certificate..."
  rm -f $FOLLOWER_CERT_FILE
  $DOCKER exec $CONJUR_MASTER_CONTAINER_NAME \
	bash -c "evoke ca issue conjur-follower $CONJUR_MASTER_HOSTNAME $CONJUR_FOLLOWER_SERVICE_NAME"
  $DOCKER cp -L $CONJUR_MASTER_CONTAINER_NAME:/opt/conjur/etc/ssl/conjur-follower.pem $FOLLOWER_CERT_FILE

  echo "Caching Conjur Follower seed file..."
  rm -f $FOLLOWER_SEED_FILE
  $DOCKER exec $CONJUR_MASTER_CONTAINER_NAME evoke seed follower conjur-follower > $FOLLOWER_SEED_FILE
}

############################
cli_up() {
  $DOCKER run -d \
    --name $CLI_CONTAINER_NAME \
    --label role=cli \
    --restart always \
    --security-opt seccomp:unconfined \
    --add-host "$CONJUR_MASTER_HOSTNAME:$CONJUR_MASTER_HOST_IP" \
    --entrypoint sh \
    $CLI_IMAGE \
    -c "sleep infinity"

  # Initialize connection to service (create .conjurrc and conjur-xx.pem cert)
  $DOCKER exec $CLI_CONTAINER_NAME \
    bash -c "echo yes | conjur init -u $CONJUR_APPLIANCE_URL -a $CONJUR_ACCOUNT"

  # Login as admin
  $DOCKER exec $CLI_CONTAINER_NAME \
    conjur authn login -u admin -p $AUTHN_PASSWORD
}

############################
follower_up() {
  # Bring up Conjur Follower node
  $DOCKER run -d \
    --name $CONJUR_FOLLOWER_CONTAINER_NAME \
    --label role=conjur_node \
    -p "$CONJUR_FOLLOWER_PORT:443" \
    -e "CONJUR_AUTHENTICATORS=$CONJUR_AUTHENTICATORS" \
    --restart always \
    --security-opt seccomp:unconfined \
    $CONJUR_APPLIANCE_IMAGE

  if $NO_DNS; then
    # add entry to follower's /etc/hosts so $CONJUR_MASTER_HOSTNAME resolves
    $DOCKER exec -it $CONJUR_FOLLOWER_CONTAINER_NAME \
	bash -c "echo \"$CONJUR_MASTER_HOST_IP $CONJUR_MASTER_HOSTNAME\" >> /etc/hosts"
  fi

  echo "Initializing Conjur Follower"
  $DOCKER cp $FOLLOWER_SEED_FILE \
		$CONJUR_FOLLOWER_CONTAINER_NAME:/tmp/follower-seed.tar
  $DOCKER exec $CONJUR_FOLLOWER_CONTAINER_NAME \
		evoke unpack seed /tmp/follower-seed.tar
  $DOCKER exec $CONJUR_FOLLOWER_CONTAINER_NAME \
		evoke configure follower -p $CONJUR_MASTER_PORT

  echo "Follower configured."
}

############################
init_k8s_authn() {
  cp ./templates/master-seed-generation-policy.template.yaml ./policy/master-seed-generation-policy.yaml
  ../../load_policy.sh root ./policy/master-seed-generation-policy.yaml

  sed -e "s#{{ CLUSTER_AUTHN_ID }}#$CLUSTER_AUTHN_ID#g" 		\
	./templates/master-authenticator-policy.template.yaml		\
  | sed -e "s#{{ CYBERARK_NAMESPACE_NAME }}#$CYBERARK_NAMESPACE_NAME#g" \
  > ./policy/master-authenticator-policy.yaml
  ../../load_policy.sh root ./policy/master-authenticator-policy.yaml delete

  if $REMOTE_CONJUR_MASTER; then
    interpreter="ssh -i $SSH_PVT_KEY $SSH_USERNAME@$CONJUR_MASTER_HOSTNAME"
  else
    interpreter=bash
  fi

  $interpreter <<EOF
set -x
# create CA
$DOCKER exec $CONJUR_MASTER_CONTAINER_NAME				\
	chpst -u conjur conjur-plugin-service possum 			\
        rake authn_k8s:ca_init["conjur/authn-k8s/$CLUSTER_AUTHN_ID"]

$DOCKER exec $CONJUR_MASTER_CONTAINER_NAME				\
	evoke variable set CONJUR_AUTHENTICATORS authn-k8s/$CLUSTER_AUTHN_ID
EOF

}

############################
init_demo_secrets() {
  sed -e "s#{{ VAULT_NAME }}#$VAULT_NAME#g"		 		\
	./templates/master-secrets-policy.template.yaml			\
  | sed -e "s#{{ LOB_NAME }}#$LOB_NAME#g" 				\
  | sed -e "s#{{ SAFE_NAME }}#$SAFE_NAME#g" 			\
  | sed -e "s#{{ ACCOUNT_NAME }}#$ACCOUNT_NAME#g" 			\
  > ./policy/master-secrets-policy.yaml
  ../../load_policy.sh root ./policy/master-secrets-policy.yaml delete

  ../../get_set.sh set $VAULT_NAME/$LOB_NAME/$SAFE_NAME/$ACCOUNT_NAME/username $MYSQL_USERNAME
  ../../get_set.sh set $VAULT_NAME/$LOB_NAME/$SAFE_NAME/$ACCOUNT_NAME/password $MYSQL_PASSWORD
}

############################
wait_till_master_is_responsive() {
  set +e
  node_is_healthy=""
  while [[ "$node_is_healthy" == "" ]]; do
    sleep 2
    node_is_healthy=$(curl -sk $CONJUR_APPLIANCE_URL/health | grep "ok" | tail -1 | grep "true")
  done
  set -e
}

main "$@"
